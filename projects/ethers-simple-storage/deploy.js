const ethers = require("ethers");
const fs = require("fs");
require("dotenv").config();

async function deployContract() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);


    //const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    let wallet = new ethers.Wallet.fromEncryptedJsonSync(encryptedJson, process.env.PRIVATE_KEY_PASSWORD);
    wallet = await wallet.connect(provider);


    const abi = JSON.parse(fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8"));
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");
    const formattedBinary = binary.startsWith("0x") ? binary : "0x" + binary;

    
    const contractFactory = new ethers.ContractFactory(abi, formattedBinary, wallet, {gasLimit: ethers.BigNumber.from("3000000") });
    console.log("Deploying script executing...");
    const overrides = {
        gasLimit: ethers.BigNumber.from("3000000"),
        gasPrice: ethers.utils.parseUnits('20', 'gwei')  // Set gas price to 20 gwei, you can adjust as needed
    };

    // Deploy the contract
    const contract = await contractFactory.deploy(...[], overrides);
    
    console.log(contract);

    const transactionResponse =  await contract.store(69);
    const transactionReceipt = await transactionResponse.wait(1);
    const favNumber = await contract.retrieve(); 

    console.log(`Fav number now is: ${favNumber}`);


    //console.log("Deploying with transaction data");
    /*
    const txNonce = await wallet.getTransactionCount();

    const tx = {
        nonce: txNonce,
        gasPrice: "200000000000",
        gasLimit: "1000000",
        to: null,
        value: 0,
        data: "0x60806040526040518060400160405280604581526020016040518060400160405280600581526020017f426172727900000000000000000000000000000000000000000000000000000081525081525060025f820151815f01556020820151816001019081620000709190620002ea565b5050503480156200007f575f80fd5b50620003ce565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200010257607f821691505b602082108103620001185762000117620000bd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200017c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200013f565b6200018886836200013f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620001d2620001cc620001c684620001a0565b620001a9565b620001a0565b9050919050565b5f819050919050565b620001ed83620001b2565b62000205620001fc82620001d9565b8484546200014b565b825550505050565b5f90565b6200021b6200020d565b62000228818484620001e2565b505050565b5b818110156200024f57620002435f8262000211565b6001810190506200022e565b5050565b601f8211156200029e5762000268816200011e565b620002738462000130565b8101602085101562000283578190505b6200029b620002928562000130565b8301826200022d565b50505b505050565b5f82821c905092915050565b5f620002c05f1984600802620002a3565b1980831691505092915050565b5f620002da8383620002af565b9150826002028217905092915050565b620002f58262000086565b67ffffffffffffffff81111562000311576200031062000090565b5b6200031d8254620000ea565b6200032a82828562000253565b5f60209050601f83116001811462000360575f84156200034b578287015190505b620003578582620002cd565b865550620003c6565b601f19841662000370866200011e565b5f5b82811015620003995784890151825560018201915060208501945060208101905062000372565b86831015620003b95784890151620003b5601f891682620002af565b8355505b6001600288020188555050505b505050505050565b6109af80620003dc5f395ff3fe608060405234801561000f575f80fd5b506004361061005f575f3560e01c80624f2e751461006357806343ec8f47146100825780636057361d146100b25780636f760f41146100ce5780639e7a13ad146100ea578063c7a0d9f61461011b575b5f80fd5b61006b610139565b6040516100799291906103e6565b60405180910390f35b61009c60048036038101906100979190610551565b6101d0565b6040516100a99190610598565b60405180910390f35b6100cc60048036038101906100c791906105db565b6101fd565b005b6100e860048036038101906100e39190610606565b610206565b005b61010460048036038101906100ff91906105db565b61028a565b6040516101129291906103e6565b60405180910390f35b61012361033f565b6040516101309190610598565b60405180910390f35b6002805f01549080600101805461014f9061068d565b80601f016020809104026020016040519081016040528092919081815260200182805461017b9061068d565b80156101c65780601f1061019d576101008083540402835291602001916101c6565b820191905f5260205f20905b8154815290600101906020018083116101a957829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b805f8190555050565b6004604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01556020820151816001019081610260919061085a565b505050806001836040516102749190610963565b9081526020016040518091039020819055505050565b60048181548110610299575f80fd5b905f5260205f2090600202015f91509050805f0154908060010180546102be9061068d565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea9061068d565b80156103355780601f1061030c57610100808354040283529160200191610335565b820191905f5260205f20905b81548152906001019060200180831161031857829003601f168201915b5050505050905082565b5f5481565b5f819050919050565b61035681610344565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610393578082015181840152602081019050610378565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6103b88261035c565b6103c28185610366565b93506103d2818560208601610376565b6103db8161039e565b840191505092915050565b5f6040820190506103f95f83018561034d565b818103602083015261040b81846103ae565b90509392505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6104638261039e565b810181811067ffffffffffffffff821117156104825761048161042d565b5b80604052505050565b5f610494610414565b90506104a0828261045a565b919050565b5f67ffffffffffffffff8211156104bf576104be61042d565b5b6104c88261039e565b9050602081019050919050565b828183375f83830152505050565b5f6104f56104f0846104a5565b61048b565b90508281526020810184848401111561051157610510610429565b5b61051c8482856104d5565b509392505050565b5f82601f83011261053857610537610425565b5b81356105488482602086016104e3565b91505092915050565b5f602082840312156105665761056561041d565b5b5f82013567ffffffffffffffff81111561058357610582610421565b5b61058f84828501610524565b91505092915050565b5f6020820190506105ab5f83018461034d565b92915050565b6105ba81610344565b81146105c4575f80fd5b50565b5f813590506105d5816105b1565b92915050565b5f602082840312156105f0576105ef61041d565b5b5f6105fd848285016105c7565b91505092915050565b5f806040838503121561061c5761061b61041d565b5b5f83013567ffffffffffffffff81111561063957610638610421565b5b61064585828601610524565b9250506020610656858286016105c7565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806106a457607f821691505b6020821081036106b7576106b6610660565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026107197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106de565b61072386836106de565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61075e61075961075484610344565b61073b565b610344565b9050919050565b5f819050919050565b61077783610744565b61078b61078382610765565b8484546106ea565b825550505050565b5f90565b61079f610793565b6107aa81848461076e565b505050565b5b818110156107cd576107c25f82610797565b6001810190506107b0565b5050565b601f821115610812576107e3816106bd565b6107ec846106cf565b810160208510156107fb578190505b61080f610807856106cf565b8301826107af565b50505b505050565b5f82821c905092915050565b5f6108325f1984600802610817565b1980831691505092915050565b5f61084a8383610823565b9150826002028217905092915050565b6108638261035c565b67ffffffffffffffff81111561087c5761087b61042d565b5b610886825461068d565b6108918282856107d1565b5f60209050601f8311600181146108c2575f84156108b0578287015190505b6108ba858261083f565b865550610921565b601f1984166108d0866106bd565b5f5b828110156108f7578489015182556001820191506020850194506020810190506108d2565b868310156109145784890151610910601f891682610823565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f61093d8261035c565b6109478185610929565b9350610957818560208601610376565b80840191505092915050565b5f61096e8284610933565b91508190509291505056fea264697066735822122027f9172387bb856f6ec2456eeb8d553225d63c3a4a8545bc9511e9cadf37d0db64736f6c63430008150033",
        chainId: 1337, 
    }

    const sentTxResponse = await wallet.sendTransaction(tx);
    await sentTxResponse.wait(1);
    console.log(sentTxResponse);
*/

}

deployContract()
    .then(() => process.exit(0))
    .catch((err) => { 
        console.error("Error deploying contract: ", err); 
        process.exit(1);
    });
